/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Titanium SDK
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.datadog;

import android.util.Log;

import com.datadog.android.Datadog;
import com.datadog.android.core.configuration.Configuration;
import com.datadog.android.log.Logger;
import com.datadog.android.log.Logs;
import com.datadog.android.log.LogsConfiguration;
import com.datadog.android.privacy.TrackingConsent;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;


@Kroll.module(name = "TiDatadog", id = "ti.datadog")
public class TiDatadogModule extends KrollModule {

    private static final String LCAT = "TiDatadogModule";
    Logger logger;

    public TiDatadogModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @Kroll.method
    public void create(KrollDict opts) {
        String clientToken = opts.getString("clientToken");
        String envName = opts.getString("environment");
        int trackingConsent = opts.getInt("trackingConsent");
        Configuration configuration = new Configuration.Builder(clientToken, envName).build();
        TrackingConsent tc = TrackingConsent.PENDING;
        if (trackingConsent == 0) {
            tc = TrackingConsent.PENDING;
        } else if (trackingConsent == 1) {
            tc = TrackingConsent.GRANTED;
        } else if (trackingConsent == 2) {
            tc = TrackingConsent.NOT_GRANTED;
        }
        Datadog.initialize(TiApplication.getAppRootOrCurrentActivity(), configuration, tc);
        if (Datadog.isInitialized()) {
            fireEvent("initialized", new KrollDict());
        }
    }


    @Kroll.method
    public void enableLogging() {
        LogsConfiguration logsConfig = new LogsConfiguration.Builder().build();
        Logs.enable(logsConfig);

        logger = new Logger.Builder()
                .setNetworkInfoEnabled(true)
                .setLogcatLogsEnabled(true)
                .setRemoteSampleRate(100f)
                .setBundleWithTraceEnabled(true)
                .setName("titanium")
                .build();

    }

    @Kroll.method
    public void log(String msg, String level) {
        if (level.equals("d")) {
            logger.d(msg);
        } else if (level.equals("i")) {
            logger.i(msg);
        } else if (level.equals("w")) {
            logger.w(msg);
        } else if (level.equals("e")) {
            logger.e(msg);
        } else if (level.equals("wtf")) {
            logger.wtf(msg);
        }
    }


    @Kroll.setProperty
    public void setVerbosity(int value) {
        if (value == 0) {
            Datadog.setVerbosity(android.util.Log.INFO);
        } else if (value == 1) {
            Datadog.setVerbosity(android.util.Log.DEBUG);
        } else if (value == 2) {
            Datadog.setVerbosity(Log.VERBOSE);
        }
    }


}

